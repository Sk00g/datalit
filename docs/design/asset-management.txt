---------------
ASSET MANAGEMENT
---------------

Strategy for handling image, video, audio, and data assets  

* Have a main asset manager class
    - Lazy load might be better for optimization
    - everything should be accessible via the 'get[ASSET_TYPE]', returns an object based on the given resource name
        # Type could be specified in the call or just the name
        # Throw smart errors for easy debugging
    - the only export from assetManager.js is the static AssetManager class, used for everything
    - Types:
        # Image: HTMLImageElement
        # Video: TBA
        # Audio: TBA
        # data: regular JS object (load the data as JSON?)
    - If asset metadata is ever required, this could be implement through other functions of the static class
* Python tool does the work of finding files under public/assets/ and writing them to a .js file so our main JS code can pre-load these on startup. See tools/asset_loader.py
