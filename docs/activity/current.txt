-----------------------
CURRENT ACTIVITY REPORT
-----------------------

LAST UPDATE:		2019/05/06 22:23
SYSTEM:				Styles & Themes
(Design -> Research -> Prototype -> Write -> Test -> Document)
STAGE:				Prototype

IMMEDIATE:
- incorporate theme data object into codebase
    * Working on this, have some examples and the script that makes Assets Map and such. Uses fetch API to grab the file from the server.
    * Possible problem that might need redesign: Files are currently in JSON and loaded on demand, this means there is no Intellisense with which to use the colors and styles and such of a theme. Not sure if this is a problem if you're using an editor
    * The above problem shouldn't really matter in regular theme usage, as it will be applied automatically by default to controls (App.BaseTheme). But still when doing any custom theme application and such, Intellisense would be near-essential, so will probably need to include functionality to translate and parse JSON theme files into usable Javascript, which can just be imported as required... Not sure how this will work  
    
----------
TASK LIST
----------


----------
COMPLETED
----------

- design and build style data objects
- incorporate style data object into codebase
* Taking an urgent detour from style system to address the delayed property update shenanigans
- make styles automatically switch on state change, which occur from events
- design and build theme data object

--------------------
DIVERTED OR DROPPED
--------------------
* Might be worth going back and changing the structure of control constructors to have ALL property registrationn in the base Control / DynamicControl classes, and just pass the property names in... not sure

